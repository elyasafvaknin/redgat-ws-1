kind: Deployment
apiVersion: apps/v1
metadata:
  name: {{ .Chart.Name }}
spec:
  replicas: {{ .Values.ReplicaNumber }}
  selector:
    matchLabels:
      app: {{ .Chart.Name }}
  template:
    metadata:
      labels:
        app: {{ .Chart.Name }}
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/ConfigMap.yaml") . | sha256sum }}
        rollme: {{ randAlphaNum 5 | quote }}
    spec:
      volumes:
        - name: index-html
          configMap:
            name: '{{ .Chart.Name }}-html'
            defaultMode: 420
      containers:
        - resources: {}
          terminationMessagePath: /dev/termination-log
          name: {{ .Chart.Name }}
          ports:
            - containerPort: {{ .Values.containers.containerPort }}
              protocol: TCP
          imagePullPolicy: Always
          terminationMessagePolicy: File
          image: {{ .Values.containers.image }}:{{ .Values.containers.tag }}
          volumeMounts:
          - name: index-html
            mountPath: {{ .Values.volume.mount.path }} # this will mount the html.index file to it application location
          readinessProbe:
            httpGet:
              path: {{ .Values.readinessProbe.path }} # this check the application url path
              port: {{ .Values.containers.containerPort  }} # In which port the Application is listening
              scheme: HTTP
            initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds }}
            timeoutSeconds: {{ .Values.readinessProbe.timeoutSeconds }}
            periodSeconds: {{ .Values.readinessProbe.periodSeconds }}
            successThreshold: {{ .Values.readinessProbe.successThreshold }}
            failureThreshold: {{ .Values.readinessProbe.failureThreshold }}
          livenessProbe:
              httpGet:
                path: {{ .Values.livenessProbe.path }}
                port: {{ .Values.containers.containerPort }}
                scheme: HTTP
              initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
              timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds }}
              periodSeconds: {{ .Values.livenessProbe.periodSeconds }}
              successThreshold: {{ .Values.livenessProbe.successThreshold }}
              failureThreshold: {{ .Values.livenessProbe.failureThreshold }}
          env:
          - name: PORT
            value: {{ .Values.containers.containerPort | quote }}
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 25%
      maxSurge: 25%
  revisionHistoryLimit: 10